service: Eootm
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:provider.environment.user_pool_id}
        audience: 
          - ${self:provider.environment.client_id}
  region: ap-south-1
  stage: dev
  timeout: 10
  memorySize: 128
  environment:
    
    DYNAMODB_TABLE: EOOMT
    REGION_NAME: ${self:provider.region}
    user_pool_id: ap-south-1_sQeBGTxl8
    client_id: 48hko2q1qsd36p6d3kcrla334j


  iam:
      role:
        statements:
          - Effect: 'Allow'
            Resource: '*'
            Action: 's3:*'
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

          - Effect: Allow
            Action:
              - cognito-identity:*
              - cognito-sync:*
              - cognito-idp:*
              - lambda:*
            Resource: "arn:aws:cognito-idp:ap-south-1:377944167346:userpool/ap-south-1_sQeBGTxl8"  


package: 
  patterns:
    - '!front-end/**'

functions:

  get_all_task_types:
    handler: task-type/handler.get_all_task_types  
    events:
      - httpApi:
          path: /task-type/getAll
          method: get
          authorizer: 
            name: serviceAuthorizer        

  emp_by_task_type:
    handler: employees/handler.emp_by_task_type  
    events:
      - httpApi:
          path: /employees/emp
          method: get
          authorizer: 
            name: serviceAuthorizer 

  add_new_task:
    handler: task-list/handler.add_new_task  
    events:
      - httpApi:
          path: /addTask
          method: put
          authorizer: 
            name: serviceAuthorizer                             
  
  add_new_task_type:
    handler: task-type/handler.add_new_task_type  
    events:
      - httpApi:
          path: /addTaskType
          method: put
          authorizer: 
            name: serviceAuthorizer      


  get_all_employees:
    handler: employees/handler.get_all_employees  
    events:
      - httpApi:
          path: /allemp
          method: get
          authorizer: 
            name: serviceAuthorizer                                   
  


plugins:
  - serverless-python-requirements


